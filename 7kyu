//Shortest Word
func find_short(_ str: String) -> Int {
    
    let words = str.components(separatedBy: " ")
    let shortestWord = words.min(by: {$0.count < $1.count})
    let count = shortestWord?.count ?? 0
    return count
}

print(find_short("Success is stumbling from failure to failure with no loss of enthusiasm."))

//Factorial
func factorial2(_ n: Int) -> UInt64 {
    if  n <= 0 {
        return 1
    } else if n > UInt.max {
        return 1
    } else {
        return UInt64(n) * UInt64(factorial(n - 1))
    }
}

print(factorial2(8))

//Functional Addition
func add(_ n: Int) -> ((Int) -> Int) {
    return { x in
        return n + x
    }
}

let addFive = add(5)
let total = addFive(80)
print(total)

//Extra Perfect Numbers (Special Numbers Series #7)
func extraPerfect(_ n: Int) -> [Int] {
    
    return Array(1...n).filter { $0 % 2 != 0}
}

print(extraPerfect(7))

//Count the divisors of a number 5/31
func divisors(_ n: UInt32) -> UInt32 {
    
    var result: [UInt32] = []
    
    for i in 1...n {
        if n % i == 0 {
            result.append(i)
        }
    }

    return UInt32(result.count)
}

print(divisors(21))

func divisors2(_ n: Int) -> Int {
    return Array(1...n).filter{n % $0 == 0}.count
}

print(divisors2(21))

