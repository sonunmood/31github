//Shortest Word
func find_short(_ str: String) -> Int {
    
    let words = str.components(separatedBy: " ")
    let shortestWord = words.min(by: {$0.count < $1.count})
    let count = shortestWord?.count ?? 0
    return count
}

print(find_short("Success is stumbling from failure to failure with no loss of enthusiasm."))

//Factorial
func factorial2(_ n: Int) -> UInt64 {
    if  n <= 0 {
        return 1
    } else if n > UInt.max {
        return 1
    } else {
        return UInt64(n) * UInt64(factorial(n - 1))
    }
}

print(factorial2(8))

//Functional Addition
func add(_ n: Int) -> ((Int) -> Int) {
    return { x in
        return n + x
    }
}

let addFive = add(5)
let total = addFive(80)
print(total)

//Extra Perfect Numbers (Special Numbers Series #7)
func extraPerfect(_ n: Int) -> [Int] {
    
    return Array(1...n).filter { $0 % 2 != 0}
}

print(extraPerfect(7))

//Count the divisors of a number 5/31
func divisors(_ n: UInt32) -> UInt32 {
    
    var result: [UInt32] = []
    
    for i in 1...n {
        if n % i == 0 {
            result.append(i)
        }
    }

    return UInt32(result.count)
}

print(divisors(21))

func divisors2(_ n: Int) -> Int {
    return Array(1...n).filter{n % $0 == 0}.count
}

print(divisors2(21))

//Replace all items
func replaceAll<T: Equatable>(_ array: [T], old: T, new: T) -> [T] {
    return array.map{ $0 == old ? new : $0 }
}

print(replaceAll([1,4,5,6,7,4,4,4,4], old: 4, new: 9))

//Heron's formula
func heron(_ a: Double, _ b: Double, _ c: Double) -> Double {
  let s = (a + b + c) / 2
  return  sqrt(s * (s - a) * (s - b) * (s - c))
}



//Flatten and sort an array
func flattenAndSort<T: Comparable>(_ arr: [[T]]) -> [T] {
let result = arr.flatMap{$0}
    let sorted = result.sorted()
    return sorted
}

//Partial Word Searching
func wordSearch(_ str:String, _ arr:[String]) -> [String] {
    
    var searchedStrings: [String] = []
    
    for i in arr {
        if i.lowercased().contains(str.lowercased()) {
            searchedStrings.append(i)
        }
    }
    
    if searchedStrings.isEmpty {
        searchedStrings.append("Empty")
    } else {
        return searchedStrings
    }
    
    return searchedStrings
}

print(wordSearch("Lo", ["koko", "kiki", "lolo" ]))


//Spacify
func spacify(_ str: String) -> String {

    return str.map{String($0)}.joined(separator: " " )

}

print(spacify("I love you"))

//Sum of Minimums!
func sumOfMinimums(_ numbers: [[Int]]) -> Int {
  
    var minimums: [Int] = []
  
    for i in numbers {
        guard let minNumber = i.min() else {return 0}
        minimums.append(minNumber)
    }

    return minimums.reduce(0, +)
}

print(sumOfMinimums([[5,7,9,2,3,5], [7,5,3,4,0], [4,6,4,3,2,1], [4567,8888,444,22]]))

//Square Every Digit
func squareDigits(_ num: Int) -> Int {
    let digits =  String(num).compactMap{$0.wholeNumberValue}.map{$0 * $0}
    var number = ""
    
    for i in digits {
        number += String(i)
    }
  return Int(number)!
}

print(squareDigits(4567890))

//Jumping Number (Special Numbers Series #4)
func jumpingNumber(_ number: Int) -> String {
  let numberStr = String(number)
    let digits = numberStr.map { Int(String($0))! }
    
    for i in 0..<digits.count - 1 {
        let diff = abs(digits[i] - digits[i + 1])
        if diff != 1 {
            return "Not!!"
        }
    }
    return "Jumping!!"
}


//Find the nth Digit of a Number
func findDigit(_ num:Int, _ nth: Int) -> Int {
    if nth <= 0 {
        return -1
    }
    
    let positive = abs(num)
    
    let numString = String(num)
    
    if nth > numString.count {
        return 0
    }
    
    let index = numString.index(numString.endIndex, offsetBy: -nth)
        if let digit = numString[index].wholeNumberValue {
            return digit
        } else {
            return -1
    }
}


//Lost number in number sequence
func findDeletedNumber(_ array: [Int], _ mixArray: [Int]) -> Int {
    
    let mixArray = Set(mixArray)
    
    for number in array {
        if !mixArray.contains(number) {
            return number
        }
    }
    
    return 0
}

print(findDeletedNumber([1,2,3,4,5,6,7,8,9,10], [1,2,3,5,6,7,8,9,10]))

